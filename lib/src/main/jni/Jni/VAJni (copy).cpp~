
#include "jni.h"

  typedef void (* hook_native_load_url)(JNIEnv* env, jobject jcaller,
    jlong nativeNavigationControllerAndroid,
    jstring url,
    jint loadUrlType,
    jint transitionType,
    jstring referrerUrl,
    jint referrerPolicy,
    jint uaOverrideOption,
    jstring extraHeaders,
    jobject postData,
    jstring baseUrlForDataUrl,
    jstring virtualUrlForDataUrl,
    jstring dataUrlAsString,
    jboolean canLoadLocalResources,
    jboolean isRendererInitiated,
    jboolean shouldReplaceCurrentEntry);
  
static void jni_nativeLoadUrlHooklll(
    JNIEnv*env,
    jobject jcaller,
    jlong nativeNavigationControllerAndroid,
    jstring url,
    jint loadUrlType,
    jint transitionType,
    jstring referrerUrl,
    jint referrerPolicy,
    jint uaOverrideOption,
    jstring extraHeaders,
    jobject postData,
    jstring baseUrlForDataUrl,
    jstring virtualUrlForDataUrl,
    jstring dataUrlAsString,
    jboolean canLoadLocalResources,
    jboolean isRendererInitiated,
    jboolean shouldReplaceCurrentEntry,
    jobject orginJniFnPtr) {

    const char *c_url = env->GetStringUTFChars(url, 0);
    ALOGI("  Hook JNI Call url:%s \n", c_url);
    void *orginPtr = reinterpret_cast<void*>(orginJniFnPtr);
    hook_native_load_url _orginJniFnPtr = reinterpret_cast<hook_native_load_url>(orginJniFnPtr);
    ALOGI("  Hook JNI get url:%s, orginPtr:%p, orginJniFnPtr:%p\n", c_url, orginPtr, _orginJniFnPtr);
    if(_orginJniFnPtr != NULL){
        reinterpret_cast<hook_native_load_url>(_orginJniFnPtr)(env, jcaller,
nativeNavigationControllerAndroid,url,loadUrlType,transitionType,referrerUrl,
referrerPolicy,uaOverrideOption,extraHeaders,postData,baseUrlForDataUrl,
virtualUrlForDataUrl,dataUrlAsString,canLoadLocalResources,isRendererInitiated
,shouldReplaceCurrentEntry);
    } 
}  // namespace android

static void * g_orginJniFnPtr = NULL;
static void jni_nativeLoadHookSo(JNIEnv*env,
    jobject jcaller,
    jstring soPath){
        //const char *c_soPath = env->GetStringUTFChars(soPath, 0);
    //ALOGI("  Call jni_nativeLoadHookSo c_soPath:%s \n", c_soPath);
    ALOGI("  Call jni_nativeLoadHookSo \n");
}

extern "C"  void loadUrlHooklll123(JNIEnv*env,
    jobject jcaller,
    jlong nativeNavigationControllerAndroid,
    jstring url,
    jint loadUrlType,
    jint transitionType,
    jstring referrerUrl,
    jint referrerPolicy,
    jint uaOverrideOption,
    jstring extraHeaders,
    jobject postData,
    jstring baseUrlForDataUrl,
    jstring virtualUrlForDataUrl,
    jstring dataUrlAsString,
    jboolean canLoadLocalResources,
    jboolean isRendererInitiated,
    jboolean shouldReplaceCurrentEntry) {

    const char *c_url = env->GetStringUTFChars(url, 0);
    ALOGI("  Call loadUrlHooklll123 url:%s \n", c_url);
    hook_native_load_url _orginJniFnPtr = reinterpret_cast<hook_native_load_url>(g_orginJniFnPtr);
    ALOGI("  Call loadUrlHooklll123 url:%s, orginJniFnPtr:%p, g_orginJniFnPtr:%p\n", c_url,  
    _orginJniFnPtr, g_orginJniFnPtr);
    if(_orginJniFnPtr != NULL){
        reinterpret_cast<hook_native_load_url>(_orginJniFnPtr)(env, jcaller,
nativeNavigationControllerAndroid,url,loadUrlType,transitionType,referrerUrl,
referrerPolicy,uaOverrideOption,extraHeaders,postData,baseUrlForDataUrl,
virtualUrlForDataUrl,dataUrlAsString,canLoadLocalResources,isRendererInitiated
,shouldReplaceCurrentEntry);
    }
}  // namespace android


extern "C"  JNINativeMethod gHookMethods[] = {
    { "nativeLoadUrl",
      "(JLjava/lang/String;IILjava/lang/String;IILjava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZ)V",
      reinterpret_cast<void*>(loadUrlHooklll123)}
};

void* get_method_list(){
    ALOGI("  Call  get_method_list:%p\n", reinterpret_cast<void*>(gHookMethods));
    return reinterpret_cast<void*>(gHookMethods);
}

extern "C"  void* getHookNativeMethodList(){
    //ALOGI("  Call  getHookList gHookMethods:%p\n", gHookMethods);
    return get_method_list();
}

int gMethodCnt = 1;
int get_method_cnt(){
    return gMethodCnt;
}

extern "C" int getHookNativeMethodCnt(){
    ALOGI("  Call  getHookListCnt:%d\n", 1);
    return 1;
}

extern "C" void setOrginJniFnPtr(void * orginJniFnPtr){
    g_orginJniFnPtr = orginJniFnPtr;
    ALOGI("  Call  setOrginJniFnPtr g_orginJniFnPtr:%p\n", g_orginJniFnPtr);
}

static void jni_nativeLoadUrl(
    JNIEnv*env,
    jobject jcaller,
    jlong nativeNavigationControllerAndroid,
    jstring url,
    jint loadUrlType,
    jint transitionType,
    jstring referrerUrl,
    jint referrerPolicy,
    jint uaOverrideOption,
    jstring extraHeaders,
    jobject postData,
    jstring baseUrlForDataUrl,
    jstring virtualUrlForDataUrl,
    jstring dataUrlAsString,
    jboolean canLoadLocalResources,
    jboolean isRendererInitiated,
    jboolean shouldReplaceCurrentEntry) {
    ALOGI("  Call TARGET jni_nativeLoadUrl ");
    const char *c_url = env->GetStringUTFChars(url, 0);
    ALOGI("  Call TARGERT get url:%s", c_url);
}  // namespace android

alias_ref<jclass> nativeEngineClass;


JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *) {
    return initialize(vm, [] {
        nativeEngineClass = findClassStatic("com/lody/virtual/client/NativeEngine");
        nativeEngineClass->registerNatives({
                        makeNativeMethod( "nativeLoadUrl",
                                        jni_nativeLoadUrl ),
                        makeNativeMethod( "nativeLoadHookSo",
                                        jni_nativeLoadHookSo ),                                        
                }
        );
    });
}


